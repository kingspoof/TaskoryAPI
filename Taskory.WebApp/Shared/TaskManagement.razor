@inject LoginState loginstate;
@using Microsoft.Extensions.Configuration
@using Taskory.WebApp;
@inject IConfiguration configuration



<div class="card">
    <div class="card-body">
        <i @bind="CreateMessasge"></i>
        <div class="container">
            <div class="row">
                <div class="col-sm-7">
                    <table class="table table-hover table-borderless">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Repeat after n days</th>
                                <th>Next</th>
                                <th>End</th>
                                <th>User</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var t in o.Tasks.Where(n => !n.Deleted))
                            {
                                <tr @onclick="() => TaskClicked(t.ID)">
                                    <td>@t.Name</td>
                                    <td>@t.Descriprion</td>
                                    <td>@t.RepeatAfterXDays</td>
                                    <td>@t.StartDate.ToString("dd.MM.yyyy")</td>
                                    @*<td>@(t.EndDate < DateTime.Now ? "-" : t.EndDate.ToString("dd.MM.yyyy"))</td>*@
                                    <td>@o.Users.Where(n => n.ID == t.UserID).FirstOrDefault().Username</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="col-sm-5">
                    <div class="card" hidden="@HideCreate">
                        <div class="card-body">
                            <div class="card-body">
                                <p class="fw-light">@(create? "Create" : "Edit" ) Task</p>
                                @if (create)
                                {
                                    <i @bind="CreateMessage"></i>
                                }
                                <div class="input-group input-group-sm mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">*Name</span>
                                    </div>
                                    <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="TaskToCreate.Name">
                                </div>
                                <div class="input-group input-group-sm mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">Description</span>
                                    </div>
                                    <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="TaskToCreate.Descriprion">
                                </div>
                                <div class="input-group input-group-sm mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">*Repeat after n days</span>
                                    </div>
                                    <input type="number" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="TaskToCreate.RepeatAfterXDays">
                                </div>
                                <div class="input-group input-group-sm mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">*Next</span>
                                    </div>
                                    <input @bind="TaskToCreate.StartDate" @bind:format="dd.MM.yyyy" />
                                </div>
                                @*<div class="input-group input-group-sm mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">End</span>
                                    </div>
                                    <input @bind="TaskToCreate.EndDate" @bind:format="dd.MM.yyyy" />
                                </div>*@
                                <div class="input-group input-group-sm mb-3">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text" id="inputGroup-sizing-sm">*User</span>
                                    </div>
                                    <select class="form-control selectpicker" @bind="TaskToCreate.UserID">
                                        @foreach (var user in o.Users.Where(n => !n.Deleted))
                                        {
                                            <option value="@user.ID">@user.Username</option>
                                            // Blazor needs to know what values it binds to!
                                        }
                                    </select>
                                </div>
                                <div hidden="@HideCreateButtons">
                                    <button class="btn btn-primary" @onclick="SaveTask">Save</button>
                                    <button class="btn btn-secondary" @onclick="DiscardTask">Discard</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    @if (changes)
                    {

                        <button class="btn btn-danger" @onclick="SaveChanges">Save</button>
                    }
                    else
                    {
                        <button class="btn btn-info" @onclick="SaveChanges">Save</button>
                    }
                    <button class="btn btn-secondary" @onclick="StartTaskCreation">Create</button>
                    <button class="btn btn-dark" @onclick="DeleteSelected">Delete</button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Organisation o { get; set; }
    public bool changes = false;


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (o.Tasks == null)
            o.Tasks = new List<Taskory.WebApp.Task>();
        TaskToCreate = new WebApp.Task();
        TaskToCreate.StartDate = new DateTime();
        TaskToCreate.EndDate = new DateTime();
    }


    #region CreateTask
    private Taskory.WebApp.Task TaskToCreate { get; set; } = new WebApp.Task();
    private string CreateMessage = "";
    private bool HideCreate = true;
    private bool HideCreateButtons = false;
    private bool create = false;
    private bool edit = false;


    private void StartTaskCreation()
    {
        changes = true;
        TaskToCreate = new WebApp.Task();
        HideCreate = false;
        create = true;
        edit = false;
        HideCreateButtons = false;
    }

    private void SaveTask()
    {


        bool stringValid = !String.IsNullOrEmpty(TaskToCreate.Name);
        bool RAXDValid = TaskToCreate.RepeatAfterXDays > 0;
        bool StartValid = TaskToCreate.StartDate > DateTime.Now.AddMonths(-5);
        bool userValid = (o.Users.Any(u => u.ID == TaskToCreate.UserID));


        if (stringValid && RAXDValid && StartValid && userValid)
        {
            if (create)
            {
                o.Tasks.Add(TaskToCreate);
                Console.WriteLine("Adding task");
                HideCreate = true;
                SaveChanges();
            }
        }
        else
        {
            Console.WriteLine("Wrong");
            CreateMessage = "Fill required field!";
        }
        changes = true;
    }


    private void DiscardTask()
    {
        HideCreate = true;
        edit = true;
        create = false;
        TaskToCreate = new WebApp.Task();
    }
    #endregion

    #region EditTask
    private WebApp.Task selectedTask { get; set; } = new WebApp.Task();

    public void TaskClicked(int id)
    {
        changes = true;
        if (id == 0)
        {
            CreateMessage = "Save before editing newly created task";
        }
        else
        {
            this.TaskToCreate = o.Tasks.FirstOrDefault(t => t.ID == id);
            HideCreate = false;
            HideCreateButtons = true;
            edit = true;
        }
    }
    public void DeleteSelected()
    {
        changes = true;
        if (TaskToCreate.ID > 0)
        {
            TaskToCreate.Deleted = true;
            HideCreate = true;
            edit = false;
        }
    }
    #endregion

    #region SaveChanges()
    private async System.Threading.Tasks.Task SaveChanges()
    {
        //send changes to the api with the organisation as json
        HttpClient client = new HttpClient();

        HideCreate = true;

        //save changes foreach user
        var json = new StringContent(System.Text.Json.JsonSerializer.Serialize(o));
        Console.WriteLine(json);
        var result = await client.PutAsJsonAsync($"{configuration["API"]}api/Organisations/{o.ID}?transpondercode={loginstate.UserID}", o);
        Console.WriteLine(result);

        await Reload();
        changes = false;
    }
    #endregion

    private async System.Threading.Tasks.Task Reload()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(configuration["API"]);
        var response = await client.GetAsync($"api/Organisations/{loginstate.UserID}");
        Organisation temp = await response.Content.ReadFromJsonAsync<Organisation>();
        o = temp;
        changes = false;
    }
}
