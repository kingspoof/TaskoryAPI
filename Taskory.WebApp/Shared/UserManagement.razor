@using Microsoft.Extensions.Configuration
@inject LoginState loginstate;
@inject IConfiguration configuration;
@inject NavigationManager nav;



<div class="card">
    <div class="card-body">
        <i></i>
        <div class="container">
            <div class="row">
                <div class="col-7 float-left">
                    <table class="table table-hover table-borderless">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Username</th>
                                <th scope="col">Admin</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (User n in o.Users)
                            {
                                @if (!n.Deleted && !(Convert.ToInt32(n.AuthentificationTempelate.Split("-")[0]) / 79 == n.ID))
                                {
                                    <tr @onclick="() => UserClicked(n.ID)">
                                        <td>@n.FirstName @n.Name </td>
                                        <td>@n.Username</td>
                                        <td>@((Convert.ToInt32(n.AuthentificationTempelate.Split("-")[0]) / 79 == n.ID)? "Y" : "N")</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <div class="col-sm-12 col-md-5" hidden="@HideEditWindows">
                    <div class="card">
                        <div class="card-body">
                            <p class="fw-light">Edit user</p>
                            <div class="input-group input-group-sm mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Name</span>
                                </div>
                                <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="targetuser.Name">
                            </div>
                            <div class="input-group input-group-sm mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">FirstName</span>
                                </div>
                                <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="targetuser.FirstName">
                            </div>
                            <div class="input-group input-group-sm mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Username</span>
                                </div>
                                <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="targetuser.Username">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-12 col-md-5" hidden="@HideCreationWindow">
                    <div class="card">
                        <div class="card-body">
                            <p class="fw-light">Create User</p>
                            <i style="color:red;">@createMessage</i>
                            <div class="input-group input-group-sm mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Name</span>
                                </div>
                                <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="targetuser.Name">
                            </div>
                            <div class="input-group input-group-sm mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">FirstName</span>
                                </div>
                                <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="targetuser.FirstName">
                            </div>
                            <div class="input-group input-group-sm mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">Username</span>
                                </div>
                                <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="targetuser.Username">
                            </div>
                            <div class="input-group input-group-sm mb-3">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-sm">PW</span>
                                </div>
                                <input type="text" class="form-control" aria-label="Name" aria-describedby="inputGroup-sizing-sm" @bind="targetuser.Password">
                            </div>
                            <div>
                                <button class="btn btn-primary" @onclick="saveNewUser">Save</button>
                                <button class="btn btn-secondary" @onclick="Discard">Discard</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @if (changes)
        {
            <button type="button" @onclick="SaveChanges" class="btn btn-danger pull-right">Save</button>
        }
        else
        {
            <button type="button" @onclick="SaveChanges" class="btn btn-info pull-right">Save</button>
        }
        <button type="button" @onclick="StartUserCreation" class="btn btn-secondary pull-right">Create</button>
        <button type="button" @onclick="DeleteCurrentUser" class="btn btn-dark pull-right">Delete</button>
    </div>
</div>



@code {
    [Parameter]
    public Organisation o { get; set; }

    private int currentSelectedUser { get; set; }
    private bool HideEditWindows = true;
    private bool HideCreationWindow = true;
    private bool changes = false;


    private string createMessage { get; set; }

    private User targetuser { get; set; }

    private void UserClicked(int n)
    {
        Console.WriteLine("User Clicked => " + n);
        currentSelectedUser = n;
        HideEditWindows = false;
        HideCreationWindow = true;
        changes = true;
        this.targetuser = o.Users.FirstOrDefault(i => i.ID == n);
    }

    private void StartUserCreation()
    {
        targetuser = new User();
        HideCreationWindow = false;
        HideEditWindows = true;

    }

    private string CreatePassword()
    {
        return "";
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        //Make a copy of o for saving prposes
        targetuser = o.Users.FirstOrDefault();
    }

    private async System.Threading.Tasks.Task DeleteCurrentUser()
    {
        targetuser.Deleted = true;
        HideEditWindows = true;
        changes = true;
        @*
            HttpClient client = new HttpClient();
            await client.DeleteAsync($"https://localhost:20178/api/User/{targetuser.ID}?transpondercode={loginstate.Transmitioncode}");*@
    }

    private void Discard()
    {
        targetuser = new User();
        HideCreationWindow = true;
    }

    private async System.Threading.Tasks.Task SaveChanges()
    {
        //send changes to the api with the organisation as json
        HttpClient client = new HttpClient();

        HideEditWindows = true;

        changes = false;

        //save changes foreach user
        var json = new StringContent(System.Text.Json.JsonSerializer.Serialize(o));
        Console.WriteLine(json);
        var result = client.PutAsJsonAsync($"{configuration["API"]}api/Organisations/{o.ID}?transpondercode={loginstate.UserID}", o);
        Console.WriteLine(result);
    }

    private async System.Threading.Tasks.Task saveNewUser()
    {


        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(configuration["API"]);

        var result = await client.PostAsJsonAsync($"api/User?organisationID={loginstate.OrganisationID}", targetuser);
        if (result.StatusCode == (System.Net.HttpStatusCode)420)
        {
            createMessage = "username already taken";
        }
        else
        {
            createMessage = "";

            @*targetuser.AuthentificationTempelate = "100-[1234]-100";
                o.Users.Add(targetuser);*@
            await Reload();

            HideCreationWindow = true;
            targetuser = new User();

        }
    }

    private async System.Threading.Tasks.Task Reload()
    {
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri(configuration["API"]);
        var response = await client.GetAsync($"api/Organisations/{loginstate.UserID}");
        Organisation temp = await response.Content.ReadFromJsonAsync<Organisation>();
        o = temp;
    }
}